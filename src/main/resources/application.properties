baseUrl=http://localhost:8080

# PostgresSql
#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=1234567
#spring.datasource.driver-class-name=org.postgresql.Driver
#

# H2 Configuration
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=h2database
spring.datasource.password=123456
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect





# Common Flyway properties
flyway.enabled=true

# Profile-specific Flyway properties
# PostgreSQL
#spring.profiles=postgres
#flyway.url=jdbc:postgresql://localhost:5432/your_db
#flyway.user=your_username
#flyway.password=your_password




# This will create table automatically in your database (update/create)
spring.jpa.hibernate.ddl-auto=update


# Apache Kafka
spring.kafka.producer.bootstrap-servers=localhost:29092
spring.kafka.consumer.bootstrap-servers=localhost:29092
spring.kafka.consumer.group-id=my-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# LinkedIn OAuth2
#spring.security.oauth2.client.registration.linkedin.client-id=86xfeosqtas5qu
#spring.security.oauth2.client.registration.linkedin.client-secret=lGeVodVhSaq0iaD7
#spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/linkedin
#spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
#spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
#spring.security.oauth2.client.registration.linkedin.scope=profile, email
#spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
#spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me


#Google OAuth2

spring.security.oauth2.client.registration.google.client-id=1037747053191-20gvfvkujicvt8qnco4auohqrfl6v9qe.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=profile,email



# GitHub OAuth2
spring.security.oauth2.client.registration.github.client-id=f068e31d04ad60537ffc
spring.security.oauth2.client.registration.github.client-secret=3594121852ff99eecf84d4afc3e1d1ef918d0ff1
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/github
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG