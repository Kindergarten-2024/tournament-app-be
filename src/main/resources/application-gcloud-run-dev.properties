baseUrl=https://tournament-app-be-zigpprg2xq-og.a.run.app
frontendUrl=https://tournament-app-fe-zigpprg2xq-og.a.run.app

## PostgresSql
#spring.datasource.url=jdbc:postgresql://34.118.69.211:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=Jlyl}%If6?l(i8hH12341243121234
#spring.datasource.driver-class-name=org.postgresql.Driver




# H2 Configuration
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=h2database
spring.datasource.password=123456
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.settings.web-allow-others=true





# Common Flyway properties
flyway.enabled=true

# This will create table automatically in your database (update/create)
spring.jpa.hibernate.ddl-auto=create

# Apache Kafka
spring.kafka.producer.bootstrap-servers=pkc-03vj5.europe-west8.gcp.confluent.cloud:9092
spring.kafka.consumer.bootstrap-servers=pkc-03vj5.europe-west8.gcp.confluent.cloud:9092
spring.kafka.consumer.group-id=my-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.properties.sasl.mechanism=PLAIN
spring.kafka.bootstrap-servers=pkc-03vj5.europe-west8.gcp.confluent.cloud:9092
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='5YGFD7MNBADEZRLU' password='BM6G6aEatDNTGku6H8qosKOtlZCvDL61OPYuPrKUoHZuvicXsoi2C9K2lUPXiivf';
spring.kafka.properties.security.protocol=SASL_SSL


# LinkedIn OAuth2
#spring.security.oauth2.client.registration.linkedin.client-id=86xfeosqtas5qu
#spring.security.oauth2.client.registration.linkedin.client-secret=lGeVodVhSaq0iaD7
#spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/linkedin
#spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
#spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
#spring.security.oauth2.client.registration.linkedin.scope=profile, email
#spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
#spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me

# GitHub OAuth2
spring.security.oauth2.client.registration.github.client-secret=3594121852ff99eecf84d4afc3e1d1ef918d0ff1
spring.security.oauth2.client.registration.github.client-id=70f2db732bd63fecf51b
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/github
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token


## why do we need this???
#spring.main.allow-circular-references=true



server.tomcat.remote-ip-header=x-forwarded-for
server.tomcat.protocol-header=x-forwarded-proto
server.tomcat.use-relative-redirects=true
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.same-site=none
server.use-forward-headers=true
server.forward-headers-strategy=NATIVE
server.tomcat.internal-proxies=.*

---